name: Build, Tag & Release on Push to Main/Master

on:
  push:
    branches:
      - main
      - master

permissions:
  contents: write  # Needed to create tags and releases

jobs:
  build-release:
    name: Build & Release on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            output_name: NetworkMonitor.exe
            asset_name: NetworkMonitor-Windows.exe
          - os: macos-latest
            output_name: NetworkMonitor
            asset_name: NetworkMonitor-macOS
          - os: ubuntu-latest
            output_name: NetworkMonitor
            asset_name: NetworkMonitor-Linux

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for tag history

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1.4.1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Install PyInstaller
        run: poetry add --group dev "pyinstaller>=6.12.0,<7.0.0" --python ">=3.11,<3.14"

      - name: Create version file
        run: |
          echo "version = 'pending'" > src/version.py
          echo "build_type = 'release'" >> src/version.py
          echo "build_date = '$(date)'" >> src/version.py
          echo "build_commit = '${{ github.sha }}'" >> src/version.py

      - name: Build with PyInstaller
        run: poetry run pyinstaller --name=NetworkMonitor --onefile --windowed src/main.py

      - name: Upload built artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.output_name }}

  tag-and-release:
    name: Tag and Create Release
    runs-on: ubuntu-latest
    needs: build-release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine next tag
        id: tagger
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" --sort=-v:refname | head -n 1 || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          if [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH"
          else
            NEW_TAG="v0.0.1"
          fi

          echo "New tag: $NEW_TAG"
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.tagger.outputs.tag }}
          git push origin ${{ steps.tagger.outputs.tag }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Rename artifacts for release
        run: |
          mkdir release
          for dir in dist/*/; do
            file=$(ls "$dir")
            mv "$dir/$file" "release/$file"
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tagger.outputs.tag }}
          name: Release ${{ steps.tagger.outputs.tag }}
          files: release/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
