name: Build and Release on Tag

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # This gives write permission to repository contents for releases

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            output_name: NetworkMonitor.exe
            asset_name: NetworkMonitor-Windows.exe
          - os: macos-latest
            output_name: NetworkMonitor
            asset_name: NetworkMonitor-macOS
          - os: ubuntu-latest
            output_name: NetworkMonitor
            asset_name: NetworkMonitor-Linux
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install Poetry
      uses: snok/install-poetry@v1.4.1
      with:
        version: 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Check Poetry installation
      run: |
        poetry --version
        echo "Poetry installation path: $(where poetry || which poetry)"
      shell: bash
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      shell: bash
    - name: Install project
      run: poetry install --no-interaction
      shell: bash
    - name: Install PyInstaller
      run: poetry add --group dev "pyinstaller>=6.12.0,<7.0.0" --python ">=3.11,<3.14"
      shell: bash
    - name: Create version file
      run: |
        echo "version = '${{ github.ref_name }}'" > src/version.py
        echo "build_type = 'release'" >> src/version.py
        echo "build_date = '$(date)'" >> src/version.py
        echo "build_commit = '${{ github.sha }}'" >> src/version.py
      shell: bash
    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: poetry run pyinstaller --name=NetworkMonitor --onefile --windowed src/main.py
      shell: bash
    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-latest'
      run: poetry run pyinstaller --name=NetworkMonitor --onefile --windowed src/main.py
      shell: bash
    - name: Build with PyInstaller (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: poetry run pyinstaller --name=NetworkMonitor --onefile --windowed src/main.py
      shell: bash
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.output_name }}
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/${{ matrix.output_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}