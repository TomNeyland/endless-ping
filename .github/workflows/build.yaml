name: Build Application

on:
  push:
    tags:
      - 'v*'  # Run when tag is pushed matching pattern v*, like v1.0.0
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            output_name: NetworkMonitor.exe
            asset_name: NetworkMonitor-Windows.exe
          - os: macos-latest
            output_name: NetworkMonitor
            asset_name: NetworkMonitor-macOS
          - os: ubuntu-latest
            output_name: NetworkMonitor
            asset_name: NetworkMonitor-Linux

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create version file (optional)
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        echo "version = '${{ github.ref_name }}'" > src/version.py
        echo "build_date = '$(date)'" >> src/version.py
      shell: bash
    
    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: pyinstaller --name=NetworkMonitor --onefile --windowed src/main.py
    
    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-latest'
      run: pyinstaller --name=NetworkMonitor --onefile --windowed src/main.py
    
    - name: Build with PyInstaller (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: pyinstaller --name=NetworkMonitor --onefile --windowed src/main.py
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.output_name }}
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/${{ matrix.output_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}