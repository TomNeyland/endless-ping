name: Build Application
on:
  push:
    branches:
      - master
      - main
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  auto-tag:
    name: Auto Tag
    runs-on: ubuntu-latest
    # Only run auto-tagging on master/main branch, not on tag pushes
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && !startsWith(github.ref, 'refs/tags/')
    outputs:
      new_tag: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for tags
      
      - name: Get latest tag and create new tag
        id: create_tag
        run: |
          # Get the latest tag, defaulting to v0.0.0 if none exists
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" --sort=-v:refname | head -n 1 || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Parse the version components
          if [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH"
          else
            # If tag doesn't match expected format, start with v0.0.1
            NEW_TAG="v0.0.1"
          fi
          
          echo "New tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create and push tag
          git tag $NEW_TAG
          git push origin $NEW_TAG
        shell: bash

  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [auto-tag]
    if: always() && (needs.auto-tag.result == 'success' || needs.auto-tag.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            output_name: NetworkMonitor.exe
            asset_name: NetworkMonitor-Windows.exe
          - os: macos-latest
            output_name: NetworkMonitor
            asset_name: NetworkMonitor-macOS
          - os: ubuntu-latest
            output_name: NetworkMonitor
            asset_name: NetworkMonitor-Linux
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.auto-tag.outputs.new_tag || github.ref }}
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install Poetry
      uses: snok/install-poetry@v1.4.1
      with:
        version: 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Check Poetry installation
      run: |
        poetry --version
        echo "Poetry installation path: $(where poetry || which poetry)"
      shell: bash
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      shell: bash
    - name: Install project
      run: poetry install --no-interaction
      shell: bash
    - name: Install PyInstaller
      run: poetry add --group dev "pyinstaller>=6.12.0,<7.0.0" --python ">=3.11,<3.14"
      shell: bash
    - name: Create version file
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version = '${{ github.ref_name }}'" > src/version.py
          echo "build_type = 'release'" >> src/version.py
        else
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "version = 'dev-$SHORT_SHA'" > src/version.py
          echo "build_type = 'development'" >> src/version.py
        fi
        echo "build_date = '$(date)'" >> src/version.py
        echo "build_commit = '${{ github.sha }}'" >> src/version.py
      shell: bash
    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: poetry run pyinstaller --name=NetworkMonitor --onefile --windowed src/main.py
      shell: bash
    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-latest'
      run: poetry run pyinstaller --name=NetworkMonitor --onefile --windowed src/main.py
      shell: bash
    - name: Build with PyInstaller (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: poetry run pyinstaller --name=NetworkMonitor --onefile --windowed src/main.py
      shell: bash
    - name: Generate artifact name
      id: artifact_name
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "NAME=${{ matrix.asset_name }}" >> $GITHUB_OUTPUT
        else
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "NAME=${{ matrix.asset_name }}-$SHORT_SHA" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact_name.outputs.NAME }}
        path: dist/${{ matrix.output_name }}
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/${{ matrix.output_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}