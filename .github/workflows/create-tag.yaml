name: Create Tag on Master Push

on:
  push:
    branches:
      - master
      - main

permissions:
  contents: write  # This gives write permission to repository contents (including tags)

jobs:
  test-build:
    name: Test Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install Poetry
      uses: snok/install-poetry@v1.4.1
      with:
        version: 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Install dependencies
      run: poetry install --no-interaction --no-root
      shell: bash
    - name: Install project
      run: poetry install --no-interaction
      shell: bash
    - name: Install PyInstaller
      run: poetry add --group dev "pyinstaller>=6.12.0,<7.0.0" --python ">=3.11,<3.14"
      shell: bash
    - name: Test Build with PyInstaller
      run: poetry run pyinstaller --name=NetworkMonitor --onefile --windowed src/main.py
      shell: bash

  create-tag:
    name: Create New Tag
    runs-on: ubuntu-latest
    needs: [test-build]
    if: success()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for tags
      
      - name: Get latest tag and create new tag
        id: create_tag
        run: |
          # Get the latest tag, defaulting to v0.0.0 if none exists
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" --sort=-v:refname | head -n 1 || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Parse the version components
          if [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH"
          else
            # If tag doesn't match expected format, start with v0.0.1
            NEW_TAG="v0.0.1"
          fi
          
          echo "New tag: $NEW_TAG"
          
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create and push tag
          git tag $NEW_TAG
          git push origin $NEW_TAG
        shell: bash